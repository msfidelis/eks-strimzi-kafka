---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: cluster
  namespace: strimzi
spec:
  kafka:
    version: 3.6.0
    replicas: ${KAFKA_DESIRED_REPLICAS}
    listeners:
      - name: plain
        port: 9092
        type: nodeport
        tls: false
        configuration:
          preferredNodePortAddressType: InternalDNS
      - name: tls
        port: 9093
        type: nodeport
        tls: true
        configuration:
          preferredNodePortAddressType: InternalDNS        
        authentication:
          type: tls        
    config:
      offsets.topic.replication.factor: ${KAFKA_REPLICATION_FACTOR}
      transaction.state.log.replication.factor: ${KAFKA_REPLICATION_FACTOR}
      transaction.state.log.min.isr: 2
      default.replication.factor: ${KAFKA_REPLICATION_FACTOR}
      min.insync.replicas: ${KAFKA_MIN_INSYNC_REPLICAS}
      inter.broker.protocol.version: "3.6"
      socket.request.max.bytes: ${KAFKA_REQUEST_MAX_BYTES}
    resources:
      requests:
        memory: ${KAFKA_REQUEST_MEMORY}
        cpu: ${KAFKA_REQUEST_CPU}
      limits:
        memory: ${KAFKA_LIMIT_MEMORY}
        cpu: ${KAFKA_LIMIT_CPU}
    jvmOptions:
      "-Xmx": "${KAFKA_XMX}"
      "-Xms": "${KAFKA_XMS}"
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: "${KAFKA_STORAGE_SIZE}" # 1000Gi
          class: ${KAFKA_STORAGE_CLASS}
          deleteClaim: true
    template:
      pod:
        tolerations:
          - key: "dedicated"
            operator: "Equal"
            value: "kafka"
            effect: "NoSchedule"
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: NodeGroupType
                      operator: In
                      values:
                        - kafka
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    rack:
      topologyKey: topology.kubernetes.io/zone
  zookeeper:
    replicas: ${ZOOKEEPER_DESIRED_REPLICAS}
    storage:
      type: persistent-claim
      size: ${ZOOKEEPER_STORAGE_SIZE}
      class: ${ZOOKEEPER_STORAGE_CLASS}
      deleteClaim: true
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: zookeeper-metrics-config.yml
    template:
      pod:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: NodeGroupType
                      operator: In
                      values:
                        - zookeeper
  entityOperator:
    topicOperator: {}
    userOperator: {}
  cruiseControl: {}
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"